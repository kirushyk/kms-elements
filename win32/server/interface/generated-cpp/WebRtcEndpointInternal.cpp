/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "WebRtcEndpointInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"
#include "IceCandidate.hpp"
#include "IceCandidatePair.hpp"

namespace kurento
{

void WebRtcEndpointMethodGatherCandidates::invoke (std::shared_ptr<WebRtcEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method WebRtcEndpoint::gatherCandidates");
  }

  return obj->gatherCandidates ();
}

void WebRtcEndpointMethodGatherCandidates::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

void WebRtcEndpointMethodAddIceCandidate::invoke (std::shared_ptr<WebRtcEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method WebRtcEndpoint::addIceCandidate");
  }

  return obj->addIceCandidate (candidate);
}

void WebRtcEndpointMethodAddIceCandidate::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (candidate);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("candidate") || !s.JsonValue["candidate"].isConvertibleTo (Json::ValueType::objectValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'candidate' parameter should be a object");
    }

    s.SerializeNVP (candidate);

  }
}

void WebRtcEndpointMethodCreateDataChannel::invoke (std::shared_ptr<WebRtcEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method WebRtcEndpoint::createDataChannel");
  }

  if (!__isSetLabel) {
    return obj->createDataChannel ();
  }

  if (!__isSetOrdered) {
    return obj->createDataChannel (label);
  }

  if (!__isSetMaxPacketLifeTime) {
    return obj->createDataChannel (label, ordered);
  }

  if (!__isSetMaxRetransmits) {
    return obj->createDataChannel (label, ordered, maxPacketLifeTime);
  }

  if (!__isSetProtocol) {
    return obj->createDataChannel (label, ordered, maxPacketLifeTime, maxRetransmits);
  }

  return obj->createDataChannel (label, ordered, maxPacketLifeTime, maxRetransmits, protocol);
}

void WebRtcEndpointMethodCreateDataChannel::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    if (__isSetLabel) {
      s.SerializeNVP (label);
    }

    if (__isSetOrdered) {
      s.SerializeNVP (ordered);
    }

    if (__isSetMaxPacketLifeTime) {
      s.SerializeNVP (maxPacketLifeTime);
    }

    if (__isSetMaxRetransmits) {
      s.SerializeNVP (maxRetransmits);
    }

    if (__isSetProtocol) {
      s.SerializeNVP (protocol);
    }

  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (s.JsonValue.isMember ("label") ) {
      if (s.JsonValue["label"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetLabel = true;
        s.SerializeNVP (label);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'label' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("ordered") ) {
      if (s.JsonValue["ordered"].isConvertibleTo (Json::ValueType::booleanValue) ) {
        __isSetOrdered = true;
        s.SerializeNVP (ordered);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'ordered' parameter should be a boolean");
      }
    }

    if (s.JsonValue.isMember ("maxPacketLifeTime") ) {
      if (s.JsonValue["maxPacketLifeTime"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetMaxPacketLifeTime = true;
        s.SerializeNVP (maxPacketLifeTime);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'maxPacketLifeTime' parameter should be a integer");
      }
    }

    if (s.JsonValue.isMember ("maxRetransmits") ) {
      if (s.JsonValue["maxRetransmits"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetMaxRetransmits = true;
        s.SerializeNVP (maxRetransmits);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'maxRetransmits' parameter should be a integer");
      }
    }

    if (s.JsonValue.isMember ("protocol") ) {
      if (s.JsonValue["protocol"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetProtocol = true;
        s.SerializeNVP (protocol);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'protocol' parameter should be a string");
      }
    }

  }
}

void WebRtcEndpointMethodCloseDataChannel::invoke (std::shared_ptr<WebRtcEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method WebRtcEndpoint::closeDataChannel");
  }

  return obj->closeDataChannel (channelId);
}

void WebRtcEndpointMethodCloseDataChannel::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (channelId);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("channelId") || !s.JsonValue["channelId"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'channelId' parameter should be a integer");
    }

    s.SerializeNVP (channelId);

  }
}

std::shared_ptr<MediaPipeline> WebRtcEndpointConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

bool WebRtcEndpointConstructor::getUseDataChannels ()
{
  if (!__isSetUseDataChannels && !__isSetDefaultUseDataChannels) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "false";

      reader.parse (defaultValue, s.JsonValue["useDataChannels"]);
      s.SerializeNVP (useDataChannels);
      __isSetDefaultUseDataChannels = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value useDataChannels of WebRtcEndpoint constructor, check your module: " << e.what() << std::endl;
    }
  }

  return useDataChannels;
}

void WebRtcEndpointConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

    if (__isSetUseDataChannels) {
      s.SerializeNVP (useDataChannels);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

    if (s.JsonValue.isMember ("useDataChannels") ) {
      if (s.JsonValue["useDataChannels"].isConvertibleTo (Json::ValueType::booleanValue) ) {
        __isSetUseDataChannels = true;
        s.SerializeNVP (useDataChannels);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'useDataChannels' parameter should be a boolean");
      }
    }

  }
}

} /* kurento */
