/* Autogenerated with kurento-module-creator */

#include "RtpEndpointImpl.hpp"
#include "DispatcherImpl.hpp"
#include "MixerImpl.hpp"
#include "PlayerEndpointImpl.hpp"
#include "HttpPostEndpointImpl.hpp"
#include "HttpEndpointImpl.hpp"
#include "CompositeImpl.hpp"
#include "RecorderEndpointImpl.hpp"
#include "DispatcherOneToManyImpl.hpp"
#include "WebRtcEndpointImpl.hpp"
#include "AlphaBlendingImpl.hpp"
#include "OnKeySoftLimit.hpp"
#include "Recording.hpp"
#include "Paused.hpp"
#include "Stopped.hpp"
#include "OnIceCandidate.hpp"
#include "OnIceGatheringDone.hpp"
#include "OnIceComponentStateChanged.hpp"
#include "OnDataChannelOpened.hpp"
#include "OnDataChannelClosed.hpp"
#include "NewCandidatePairSelected.hpp"
#include "EndOfStream.hpp"
#include "MediaProfileSpecType.hpp"
#include "CryptoSuite.hpp"
#include "SDES.hpp"
#include "VideoInfo.hpp"
#include "IceCandidate.hpp"
#include "IceComponentState.hpp"
#include "IceCandidatePair.hpp"

#include <jsonrpc/JsonSerializer.hpp>

namespace kurento
{

void dummyElements ()
{
  {
    JsonSerializer s (true);
    std::shared_ptr<RtpEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Dispatcher> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Mixer> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<PlayerEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<HttpPostEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<HttpEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Composite> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RecorderEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<DispatcherOneToMany> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<WebRtcEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<AlphaBlending> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<OnKeySoftLimit> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Recording> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Paused> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Stopped> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<OnIceCandidate> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<OnIceGatheringDone> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<OnIceComponentStateChanged> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<OnDataChannelOpened> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<OnDataChannelClosed> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<NewCandidatePairSelected> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<EndOfStream> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaProfileSpecType> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<CryptoSuite> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<SDES> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<VideoInfo> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<IceCandidate> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<IceComponentState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<IceCandidatePair> object;

    s.SerializeNVP (object);
  }
}

} /* kurento */
