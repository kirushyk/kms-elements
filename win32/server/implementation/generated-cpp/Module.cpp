/* Autogenerated with kurento-module-creator */

#include "FactoryRegistrar.hpp"

#include <RtpEndpointImplFactory.hpp>
#include <RtpEndpoint.hpp>
#include <DispatcherImplFactory.hpp>
#include <Dispatcher.hpp>
#include <MixerImplFactory.hpp>
#include <Mixer.hpp>
#include <PlayerEndpointImplFactory.hpp>
#include <PlayerEndpoint.hpp>
#include <HttpPostEndpointImplFactory.hpp>
#include <HttpPostEndpoint.hpp>
#include <HttpEndpointImplFactory.hpp>
#include <HttpEndpoint.hpp>
#include <CompositeImplFactory.hpp>
#include <Composite.hpp>
#include <RecorderEndpointImplFactory.hpp>
#include <RecorderEndpoint.hpp>
#include <DispatcherOneToManyImplFactory.hpp>
#include <DispatcherOneToMany.hpp>
#include <WebRtcEndpointImplFactory.hpp>
#include <WebRtcEndpoint.hpp>
#include <AlphaBlendingImplFactory.hpp>
#include <AlphaBlending.hpp>
#include <MediaProfileSpecType.hpp>
#include <CryptoSuite.hpp>
#include <SDES.hpp>
#include <VideoInfo.hpp>
#include <IceCandidate.hpp>
#include <IceComponentState.hpp>
#include <IceCandidatePair.hpp>

extern "C" {

  const kurento::FactoryRegistrar *getFactoryRegistrar ();

}

const kurento::FactoryRegistrar *
getFactoryRegistrar ()
{
  static bool loaded = false;
  static std::map<std::string, std::shared_ptr<kurento::Factory>> factories;

  if (!loaded) {
    factories["RtpEndpoint"] = std::shared_ptr <kurento::Factory> (new kurento::RtpEndpointImplFactory() );
    factories["Dispatcher"] = std::shared_ptr <kurento::Factory> (new kurento::DispatcherImplFactory() );
    factories["Mixer"] = std::shared_ptr <kurento::Factory> (new kurento::MixerImplFactory() );
    factories["PlayerEndpoint"] = std::shared_ptr <kurento::Factory> (new kurento::PlayerEndpointImplFactory() );
    factories["HttpPostEndpoint"] = std::shared_ptr <kurento::Factory> (new kurento::HttpPostEndpointImplFactory() );
    factories["Composite"] = std::shared_ptr <kurento::Factory> (new kurento::CompositeImplFactory() );
    factories["RecorderEndpoint"] = std::shared_ptr <kurento::Factory> (new kurento::RecorderEndpointImplFactory() );
    factories["DispatcherOneToMany"] = std::shared_ptr <kurento::Factory> (new kurento::DispatcherOneToManyImplFactory() );
    factories["WebRtcEndpoint"] = std::shared_ptr <kurento::Factory> (new kurento::WebRtcEndpointImplFactory() );
    factories["AlphaBlending"] = std::shared_ptr <kurento::Factory> (new kurento::AlphaBlendingImplFactory() );

    kurento::SDES::registerType ();
    kurento::VideoInfo::registerType ();
    kurento::IceCandidate::registerType ();
    kurento::IceCandidatePair::registerType ();
    loaded = true;
  }

  static kurento::FactoryRegistrar factory (factories);
  return &factory;
}
